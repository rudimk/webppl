var flip = function(theta) {
  return sample(bernoulliERP, [theta]);
};

var randomInteger = function(n) {
  return sample(randomIntegerERP, [n]);
};

var discrete = function(n) {
  return sample(discreteERP, [n]);
};

var gaussian = function(mu, sigma){
  return sample(gaussianERP, [mu, sigma]);
};

var uniform = function(a, b){
  return sample(uniformERP, [a, b]);
};

var dirichlet = function(alpha){
  return sample(dirichletERP, alpha);
};

var poisson = function(mu, k){
  return sample(poissonERP, [mu, k]);
};

var binomial = function(p, n){
  return sample(binomialERP, [p, n]);
};

var beta = function(a, b){
  return sample(betaERP, [a, b]);
};

var exponential = function(a){
  return sample(exponentialERP, [a]);
};

var gamma = function(shape, scale){
  return sample(gammaERP, [shape, scale]);
};

var makeBetaBernoulli = function(pseudocounts) {
  globalStore.BBindex = 1 + (globalStore.BBindex==undefined ? 0 : globalStore.BBindex);
  var bbname = "BB"+globalStore.BBindex;
  globalStore[bbname] = pseudocounts;
  return function(){
    var pc = globalStore[bbname];  // get current sufficient stats
    var val = sample(bernoulliERP, [pc[0]/(pc[0]+pc[1])]);  // sample from predictive.
    globalStore[bbname] = [pc[0]+val, pc[1]+!val];  // update sufficient stats
    return val;
  };
};

var makeDirichletDiscrete = function(pseudocounts) {
  var addCount = function(a,i,j) {
    var j = j==undefined?0:j;
    if(a.length==0){
      return [];
    } else {
      return [a[0] + (i==j)].concat(addCount(a.slice(1),i,j+1));
    }
  };
  globalStore.DDindex = 1+ (globalStore.DDindex==undefined?0:globalStore.DDindex);
  var ddname = "DD"+globalStore.DDindex;
  globalStore[ddname] = pseudocounts;
  return function(){
    var pc = globalStore[ddname];  // get current sufficient stats
    var val = sample(discreteERP, [pc]);  // sample from predictive. (doesn't need to be normalized.)
    globalStore[ddname] = addCount(pc, val); // update sufficient stats
    return val;
  };
};

var expectation = function(erp,f){
  var supp = erp.support([])
    return mapReduce(plus,
                     supp[supp.length-1],
                     function(s){return Math.exp(erp.score([],s))*f(s)},
                     supp.slice(0, -1))
};

var entropy = function(erp){
  var supp = erp.support([])
    return -mapReduce(plus,
                      supp[supp.length-1],
                      function(s){var lp = erp.score([],s)
                      return Math.exp(lp)*lp },
                      supp.slice(0, -1))
};

var append = function(a,b) {
  return a.concat(b);
};

var cons = function(a,b) { return [a].concat(b); };

var snoc = function(a,b) { return a.concat([b]); };

var first = function(xs) { return xs[0]; };
var second = function(xs) { return xs[1]; };
var third = function(xs) { return xs[2]; };
var fourth = function(xs) { return xs[3]; };
var secondLast = function(xs){ return xs[xs.length - 2]; };
var last = function(xs){ return xs[xs.length - 1]; };

var map = function(fn,ar) {
  return ar.length==0 ? [] : [fn(ar[0])].concat(map(fn, ar.slice(1)));
};

var map2 = function(f,l1,l2) {
  return l1.length == 0
    ? []
    : [f(l1[0],l2[0])].concat(map2(f, l1.slice(1), l2.slice(1)));
};

var reduce = function(fn,init,ar){
  return ar.length==0 ? init : fn(ar[0], reduce(fn,init,ar.slice(1)));
};

var mapReduce = function(f,init,g,ar){
  return reduce(function(a,b) { return f(g(a),b); }, g(init), ar);
};

var plus = function(a, b) { return a+b; };
var minus = function(a, b) { return a-b; };
var mult = function(a, b) { return a*b; };
var div = function(a, b) { return a/b; };

var sum = function(l) { return reduce(plus, 0, l); };

var product = function(l) { return reduce(mult, 1, l); };

var zip = function(xs, ys){
  return xs.length == 0
    ? []
    : [[xs[0], ys[0]]].concat(zip(xs.slice(1), ys.slice(1)));
};

var filter = function(fn,ar) {
  return ar.length == 0
    ? []
    : append(fn(ar[0]) ? [ar[0]] : [], filter(fn,ar.slice(1)));
};

var find = function(f,ar) {
  return ar.length == 0 ? undefined : (f(ar[0]) ? ar[0] : find(f,ar.slice(1)));
};

var remove = function(a,ar) {
  return filter(function(e) { return a != e;}, ar);
};

var drop = function(n,ar) { return n > ar.length ? [] : ar.slice(n); };

var take = function(n,ar) { return n >= ar.length ? ar : ar.slice(0,n); };

var dropWhile = function(p, ar) {
  return p(ar[0]) ? dropWhile(p,ar.slice(1)) : ar;
};

var takeWhile = function(p, ar) {
  return p(ar[0]) ? cons(ar[0],takeWhile(p,ar.slice(1))) : [];
};

var indexOf = function(x, xs) {
  var fn = function(xs, i) {
    return (xs.length == 0) ? undefined : x == xs[0] ? i : fn(xs.slice(1), i+1);
  };
  return fn(xs, 0);
};

var span = function(p, ar) {
  var fn = function(ar,_ts,_fs) {
    return ar.length == 0
      ? [_ts, _fs]
      : p(ar[0])
        ? fn(ar.slice(1), snoc(_ts,ar[0]), _fs)
        : fn(ar.slice(1), _ts, snoc(_fs,ar[0]));
  };
  return fn(ar,[],[]);
};

var groupBy = function(cmp, ar) {
  if (ar.length == 0) {
    return [];
  } else {
    var x = ar[0];
    var sp = span(function(b) { return cmp(x,b); }, ar.slice(1));
    return [cons(x,sp[0])].concat(groupBy(cmp,sp[1]));
  }
};

var repeat = function(n, fn){
  return n == 0 ? [] : append(repeat(n-1, fn), [fn()]);
};

var push = function(xs, x){
  return xs.concat([x]);
};

var compose = function(f, g){
  return function(x){
    return f(g(x));
  };
};
